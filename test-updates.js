#!/usr/bin/env node

import { MimaTourScraper } from './src/scraper.js';

async function testUpdates() {
  console.log('üß™ TESTE DAS ATUALIZA√á√ïES\n');

  const scraper = new MimaTourScraper();

  try {
    await scraper.initialize();
    console.log('‚úÖ Scraper inicializado\n');

    // Test basic scraping to check UID and status updates
    console.log('1Ô∏è‚É£ Testando UID e Status...');
    const basicTrips = await scraper.scrapeTrips('setembro', {}, false);
    
    if (basicTrips.length > 0) {
      const firstTrip = basicTrips[0];
      console.log('üìã PRIMEIRA VIAGEM (B√ÅSICA):');
      console.log(`   UID: ${firstTrip.uid || 'N/A'}`);
      console.log(`   T√≠tulo: ${firstTrip.titulo}`);
      console.log(`   Status: ${firstTrip.status}`);
      console.log(`   URL: ${firstTrip.url_reserva}\n`);

      // Validate UID extraction
      if (firstTrip.uid) {
        console.log('‚úÖ UID extra√≠do com sucesso');
      } else {
        console.log('‚ùå UID n√£o foi extra√≠do');
      }

      // Validate status
      if (firstTrip.status && firstTrip.status !== '') {
        console.log(`‚úÖ Status: ${firstTrip.status}`);
      } else {
        console.log('‚ùå Status n√£o definido');
      }
    }

    // Test detailed scraping to check improved "o_que_inclui"
    console.log('\n2Ô∏è‚É£ Testando extra√ß√£o melhorada do "O que inclui"...');
    
    // Test with a specific trip that might have the table format
    const testUrl = basicTrips[0]?.url_reserva;
    if (testUrl) {
      console.log(`üîç Testando: ${basicTrips[0].titulo}`);
      
      const details = await scraper.getTripDetails(testUrl);
      
      console.log('\nüìã RESULTADO DETALHADO:');
      console.log('=' .repeat(60));
      console.log(JSON.stringify({
        uid: details.uid || basicTrips[0].uid,
        titulo: basicTrips[0].titulo,
        status: basicTrips[0].status,
        datas: details.datas,
        embarques: details.embarques,
        o_que_inclui: details.o_que_inclui,
        investimento: details.investimento
      }, null, 2));
      console.log('=' .repeat(60));

      // Validate improvements
      console.log('\nüîç VALIDA√á√ÉO DAS MELHORIAS:');
      console.log('-' .repeat(40));
      
      // Check UID
      const hasUID = details.uid || basicTrips[0].uid;
      console.log(`UID: ${hasUID ? '‚úÖ' : '‚ùå'} (${hasUID || 'N/A'})`);
      
      // Check status
      const hasStatus = basicTrips[0].status && basicTrips[0].status !== '';
      console.log(`Status: ${hasStatus ? '‚úÖ' : '‚ùå'} (${basicTrips[0].status || 'N/A'})`);
      
      // Check o_que_inclui
      const hasIncludes = details.o_que_inclui && details.o_que_inclui.length > 0;
      console.log(`O que inclui: ${hasIncludes ? '‚úÖ' : '‚ùå'} (${details.o_que_inclui?.length || 0} itens)`);
      
      if (hasIncludes) {
        console.log('\nüìã ITENS INCLUSOS:');
        details.o_que_inclui.forEach((item, index) => {
          console.log(`   ${index + 1}. "${item}"`);
        });
      }

      // Check for specific items that should be found in tables
      const expectedItems = [
        'Ar condicionado',
        'Kit lanchinho',
        'Seguro transporte',
        'Taxa de preserva√ß√£o ambiental'
      ];
      
      console.log('\nüéØ VERIFICA√á√ÉO DE ITENS ESPEC√çFICOS:');
      expectedItems.forEach(item => {
        const found = details.o_que_inclui?.some(included => 
          included.toLowerCase().includes(item.toLowerCase())
        );
        console.log(`   ${found ? '‚úÖ' : '‚ùå'} ${item}`);
      });

      // Summary
      console.log('\nüìä RESUMO DAS ATUALIZA√á√ïES:');
      console.log('=' .repeat(50));
      console.log(`‚úÖ UID separado: ${hasUID ? 'IMPLEMENTADO' : 'PENDENTE'}`);
      console.log(`‚úÖ Status DISPON√çVEL: ${hasStatus ? 'IMPLEMENTADO' : 'PENDENTE'}`);
      console.log(`‚úÖ O que inclui melhorado: ${hasIncludes ? 'IMPLEMENTADO' : 'PENDENTE'}`);
      
      if (hasUID && hasStatus && hasIncludes) {
        console.log('\nüéâ TODAS AS ATUALIZA√á√ïES IMPLEMENTADAS COM SUCESSO!');
      } else {
        console.log('\n‚ö†Ô∏è Algumas atualiza√ß√µes precisam de ajustes');
      }

      // Save test result
      const fs = await import('fs');
      const testResult = {
        uid: hasUID,
        status: basicTrips[0].status,
        o_que_inclui: details.o_que_inclui,
        timestamp: new Date().toISOString()
      };
      fs.writeFileSync('test-updates-result.json', JSON.stringify(testResult, null, 2));
      console.log('\nüíæ Resultado salvo em: test-updates-result.json');
    }

  } catch (error) {
    console.error('‚ùå Erro durante teste:', error);
  } finally {
    await scraper.close();
    console.log('\nüßπ Recursos liberados');
  }
}

testUpdates().catch(console.error);
