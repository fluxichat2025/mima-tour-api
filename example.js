#!/usr/bin/env node

import { MimaTourScraper } from './src/scraper.js';
import { GrokIntegration } from './src/grok-integration.js';

async function demonstrateWebSearch() {
  console.log('üöÄ Demonstra√ß√£o do WebSearch MCP - Mima Tour\n');

  const scraper = new MimaTourScraper();
  const grok = new GrokIntegration();

  try {
    // 1. Testar conex√£o com Grok
    console.log('1Ô∏è‚É£ Testando conex√£o com Grok AI...');
    const grokTest = await grok.testConnection();
    
    if (grokTest.success) {
      console.log('‚úÖ Conex√£o com Grok AI estabelecida com sucesso!\n');
    } else {
      console.log('‚ùå Falha na conex√£o com Grok AI:', grokTest.error);
      console.log('‚ö†Ô∏è Continuando apenas com web scraping...\n');
    }

    // 2. Inicializar scraper
    console.log('2Ô∏è‚É£ Inicializando web scraper...');
    await scraper.initialize();
    console.log('‚úÖ Web scraper inicializado com sucesso!\n');

    // 3. Buscar viagens
    console.log('3Ô∏è‚É£ Buscando viagens no site da Mima Tour...');
    const trips = await scraper.scrapeTrips();
    console.log(`‚úÖ Encontradas ${trips.length} viagens!\n`);

    if (trips.length > 0) {
      console.log('üìã Exemplo de viagem encontrada:');
      console.log('‚îÄ'.repeat(50));
      const firstTrip = trips[0];
      console.log(`T√≠tulo: ${firstTrip.title || 'N/A'}`);
      console.log(`Destino: ${firstTrip.destination || 'N/A'}`);
      console.log(`Pre√ßo: ${firstTrip.price || 'N/A'}`);
      console.log(`Descri√ß√£o: ${firstTrip.description ? firstTrip.description.substring(0, 100) + '...' : 'N/A'}`);
      console.log('‚îÄ'.repeat(50));
      console.log();

      // 4. Enriquecer com Grok AI (se dispon√≠vel)
      if (grokTest.success) {
        console.log('4Ô∏è‚É£ Enriquecendo informa√ß√µes com Grok AI...');
        try {
          const enrichedTrip = await grok.enrichTripInformation(firstTrip);
          console.log('‚úÖ Informa√ß√µes enriquecidas com sucesso!');
          
          if (enrichedTrip.enrichedInfo && !enrichedTrip.enrichedInfo.error) {
            console.log('\nüéØ Informa√ß√µes adicionais do Grok AI:');
            console.log('‚îÄ'.repeat(50));
            console.log(JSON.stringify(enrichedTrip.enrichedInfo, null, 2));
            console.log('‚îÄ'.repeat(50));
          }
        } catch (error) {
          console.log('‚ùå Erro ao enriquecer com Grok AI:', error.message);
        }
      }

      // 5. Buscar informa√ß√µes de destino
      if (grokTest.success && firstTrip.destination) {
        console.log('\n5Ô∏è‚É£ Buscando informa√ß√µes detalhadas do destino...');
        try {
          const destinationInfo = await grok.searchDestinationInfo(firstTrip.destination);
          console.log('‚úÖ Informa√ß√µes do destino obtidas com sucesso!');
          console.log('\nüåç Informa√ß√µes do destino:');
          console.log('‚îÄ'.repeat(50));
          console.log(JSON.stringify(destinationInfo, null, 2));
          console.log('‚îÄ'.repeat(50));
        } catch (error) {
          console.log('‚ùå Erro ao buscar informa√ß√µes do destino:', error.message);
        }
      }
    } else {
      console.log('‚ö†Ô∏è Nenhuma viagem foi encontrada. Isso pode indicar:');
      console.log('   - O site pode ter mudado sua estrutura');
      console.log('   - Problemas de conectividade');
      console.log('   - Necessidade de ajustar os seletores CSS');
    }

    // 6. Demonstrar recomenda√ß√µes personalizadas
    if (grokTest.success) {
      console.log('\n6Ô∏è‚É£ Gerando recomenda√ß√µes personalizadas...');
      try {
        const preferences = {
          budget: 'R$ 2000-5000',
          type: 'Aventura e cultura',
          duration: '7-10 dias',
          interests: 'Hist√≥ria, gastronomia, natureza',
          season: 'Inverno'
        };

        const recommendations = await grok.generateTripRecommendations(preferences);
        console.log('‚úÖ Recomenda√ß√µes geradas com sucesso!');
        console.log('\nüí° Recomenda√ß√µes personalizadas:');
        console.log('‚îÄ'.repeat(50));
        console.log(JSON.stringify(recommendations, null, 2));
        console.log('‚îÄ'.repeat(50));
      } catch (error) {
        console.log('‚ùå Erro ao gerar recomenda√ß√µes:', error.message);
      }
    }

  } catch (error) {
    console.error('‚ùå Erro durante a demonstra√ß√£o:', error);
  } finally {
    // Cleanup
    await scraper.close();
    console.log('\nüßπ Limpeza conclu√≠da');
    console.log('‚ú® Demonstra√ß√£o finalizada!');
  }
}

// Executar demonstra√ß√£o
demonstrateWebSearch().catch(console.error);
